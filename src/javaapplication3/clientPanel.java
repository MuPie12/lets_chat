












/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication3;

import sun.audio.AudioPlayer;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static javaapplication3.serverPanel.portInt;
import javax.swing.JOptionPane;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/**
 *
 * @author wrx
 */
public class clientPanel extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form clientPanel
     */
    
    static Socket s;
    static InputStream is;
    static InputStreamReader isr;
    static OutputStream os;
    static PrintWriter pw;
    static BufferedReader bufferedReader;
    static List <String> contactList = new ArrayList();
    static int proxyInt;
    static String addr;
    static String pseudo;
    static String adrClient;
    static String contact;
    static ObjectInputStream ois;
    static ObjectOutputStream oos;
    
    static String accessCode;
    static int codeAccess;
    public boolean connect=false;
    Thread t2;
    private static final String IPADDRESS_PATTERN = 
		"^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
    
    static final String CONTACTLIST_PATTERN = 
					"^[a-zA-Z0-9]" +":/"+"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
										"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
										"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
										"([01]?\\d\\d?|2[0-4]\\d|25[0-5])" +
										":" +
										 "^(6553[0-5]|655[0-2]\\d|65[0-4]\\d\\d|6[0-4]\\d{3}|[1-5]\\d{4}|[2-9]\\d{3}|1[1-9]\\d{2}|10[3-9]\\d|102[4-9])"+"##$";

    
    
     static private Pattern pattern;
   static  private Matcher matcher;
    
   int xx,xy;
    
    public clientPanel() {
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        bouton__ = new javax.swing.JButton();
        boutonExit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client Panel");
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel5MouseDragged(evt);
            }
        });
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel5MousePressed(evt);
            }
        });
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(254, 254, 254));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 23)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Contacts list");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 221, -1));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jTextArea3.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea3.setLineWrap(true);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jPanel4.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 240, 390));

        jPanel5.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 200, 240, 440));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Server Address: ");
        jPanel5.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        jTextField1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        jTextField1.setText("127.0.0.1");
        jTextField1.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        jTextField1.setSelectionColor(new java.awt.Color(254, 207, 33));
        jPanel5.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, 170, -1));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Port: ");
        jPanel5.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 130, -1, -1));

        jTextField2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(0, 0, 0));
        jTextField2.setSelectedTextColor(new java.awt.Color(4, 2, 2));
        jTextField2.setSelectionColor(new java.awt.Color(226, 191, 0));
        jPanel5.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, 170, -1));

        jButton2.setBackground(new java.awt.Color(242, 192, 32));
        jButton2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jButton2.setText("Join");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 90, 171, -1));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 40)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Client Panel");
        jPanel5.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 338, -1));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Pseudo : ");
        jPanel5.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 90, -1, -1));

        jTextField3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(0, 0, 0));
        jTextField3.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        jTextField3.setSelectionColor(new java.awt.Color(226, 191, 0));
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
        });
        jPanel5.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 130, 221, -1));

        jButton3.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jButton3.setText("Disconnect");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 130, 171, -1));

        bouton__.setBackground(new java.awt.Color(36, 46, 68));
        bouton__.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        bouton__.setForeground(new java.awt.Color(255, 255, 255));
        bouton__.setText("-");
        bouton__.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bouton__ActionPerformed(evt);
            }
        });
        jPanel5.add(bouton__, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 10, 40, 40));

        boutonExit.setBackground(new java.awt.Color(36, 46, 68));
        boutonExit.setFont(new java.awt.Font("Century Gothic", 1, 10)); // NOI18N
        boutonExit.setForeground(new java.awt.Color(255, 255, 255));
        boutonExit.setText("X");
        boutonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonExitActionPerformed(evt);
            }
        });
        jPanel5.add(boutonExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 10, -1, 40));

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea2KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea2);

        jPanel5.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 660, 850, 120));

        jButton1.setBackground(new java.awt.Color(122, 174, 173));
        jButton1.setFont(new java.awt.Font("Open Sans", 0, 36)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication3/enter-key-512(1).png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 660, 160, 130));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel5.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 850, 440));

        jTextField4.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(0, 0, 0));
        jTextField4.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        jTextField4.setSelectionColor(new java.awt.Color(226, 191, 0));
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField4KeyPressed(evt);
            }
        });
        jPanel5.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 80, 221, -1));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Access Code :");
        jPanel5.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 130, -1, -1));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1206, 810));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 if (!(jTextArea2.getText().equals(""))) {        // si le client veut envoyer un mesage au Serveur
        
        String msg= "<"+pseudo+":"+adrClient+">" +" ::\t"+ jTextArea2.getText().toString()+"\n"; // dans le TextArea du client le msg sera du format <IP:port> : blblblblbl
        
        
        
        pw.println(msg); // envoie le message au serveur
       // jTextArea1.append(msg);
        jTextArea2.setText("");
        
 }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // le client va essayer de se connecter au serveur specifié par l'addresse et le port
           
            
         addr = jTextField1.getText().toString();
         if (addr.isEmpty()) {
                 JOptionPane.showMessageDialog(null, " Veuillez saisir une addresse ", "Addresse non saisie", JOptionPane.ERROR_MESSAGE);
             return;
            }
          pattern = Pattern.compile(IPADDRESS_PATTERN);
           matcher = pattern.matcher(addr);
          if ( matcher.matches() == false) 
          {
                JOptionPane.showMessageDialog(null, " Veuillez saisir une addresse IP valide ", "Addresse non Valide", JOptionPane.ERROR_MESSAGE);
             return;
          }	
         
         String proxy = jTextField2.getText().toString();
         
         if (proxy.isEmpty()) {
                 JOptionPane.showMessageDialog(null, " Veuillez saisir un port ", "Port non saisie", JOptionPane.ERROR_MESSAGE);
             return;
            }
         
        
            pseudo = jTextField4.getText().toString();
            if (pseudo.isEmpty()) {
                 JOptionPane.showMessageDialog(null, " Veuillez renseigner l'Access Code  ", "Pseudo non saisie", JOptionPane.ERROR_MESSAGE);
             return;
            }
             
            
            
              accessCode = jTextField3.getText().toString();
            try{
               codeAccess= Integer.parseInt(accessCode);
            }
              catch( NumberFormatException e){
                  
                   JOptionPane.showMessageDialog(null, " l'acces code doit etre un entier ", "Access Code  Eronée", JOptionPane.ERROR_MESSAGE);
             return;
              }
            
            if ( addr.isEmpty()) {
                
                 JOptionPane.showMessageDialog(null, " Veuillez saisir l'access Code ", "Access Code  non saisie", JOptionPane.ERROR_MESSAGE);
             return;
                
            }
            
         
         
            try{
                  proxyInt = Integer.parseInt(proxy);
                   if (proxyInt <1024  ) {
                        JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre entre ]1023; 65535] , Veuillez saisir a nouveau le port ", "Erreur de PortRange", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (proxyInt >65535  ) {
                        JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre entre ]1023; 65535] , Veuillez saisir a nouveau le port ", "Erreur de PortRange", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre entre ]1023; 65535] , Veuillez saisir a nouveau le port ", "Erreur de Port", JOptionPane.ERROR_MESSAGE);
               jTextField2.setText("");
                return;
             }
      
        
         try{
       
            s = new Socket (addr,proxyInt); //connexion au serveur
            jButton2.setEnabled(false);
            jButton3.setEnabled(true);
             jTextField3.setEditable(false);
             jTextField1.setEditable(false); 
            // jButton4.setEnabled(true);
             //jButton4.setBackground(new java.awt.Color(242, 192, 32));
              connect=true;
              jButton3.setBackground(new java.awt.Color(242, 192, 32));
              jButton2.setBackground(new java.awt.Color(238, 238, 238));
              
              
              
            
              
            
        
            
            // String contact= pseudo+":"+adrClient;
           

            String msg_area= "Bienvenue "+pseudo+", Vous etes connecté sur la porte : "+proxyInt +"  du serveur : "+ addr +"\n\n";
             jPanel5.setBackground(Color.decode("#7AAEAD"));
             try {InputStream sound= new FileInputStream(new File("../JavaApplication3/src/javaapplication3/sounds/client_connected.wav"));AudioStream audio=new AudioStream(sound); AudioPlayer.player.start(audio);} catch (Exception e) {}
              playSound("javaapplication3/sounds/client_connected.wav");
             
            jTextArea1.setText(msg_area);
            jTextArea2.setEditable(true);
             jTextField2.setEditable(false);

            BufferedReader br = new BufferedReader( new InputStreamReader ( s.getInputStream()));
             is = s.getInputStream();
                                // ois = new ObjectInputStream( is);

            pw = new PrintWriter (s.getOutputStream(),true);
              //verification de 'acces Code
              
              
              
              pw.println(codeAccess);

            // retourne l'adresse IP du socket cad le serveur
          
            String IP_Server = s.getRemoteSocketAddress().toString();


            
      
         new Conversation(s,pseudo).start();

           
        } catch (IOException ex) {
            Logger.getLogger(clientPanel.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this, "Le ServerSocket spécifié n'est pas ouvert , Veuillez vous connecter sur un Serveur Socket Ouvert  ", "Socket Closed", JOptionPane.ERROR_MESSAGE);
             return;}
       
     
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
 connect=false;
        try {
            // TODO add your handling code here:
            
            jButton2.setEnabled(true);
            jButton3.setEnabled(false);
             jButton2.setBackground(new java.awt.Color(242, 192, 32));
              jButton3.setBackground(new java.awt.Color(238, 238, 238));
            jTextArea1.append("---------------Vous etes deconnecté du Server Socket ------------------------\n");
            
             playSound("../src/javaapplication3/sounds/client_out.wav");
            try {InputStream sound= new FileInputStream(new File("../JavaApplication3/src/javaapplication3/sounds/client_out.wav"));AudioStream audio=new AudioStream(sound); AudioPlayer.player.start(audio);} catch (Exception e) {}
jPanel5.    
        
        setBackground(Color.decode("#CCCCCC"));
             jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
            JOptionPane.showMessageDialog(this, "Vous etes deconnecté du server ", "Deconnexion", JOptionPane.INFORMATION_MESSAGE);
            pw.println("##logout Le client "+pseudo +" , IP= " +adrClient+" s'est deconnecté du server");
            pw.println(pseudo+":"+adrClient);
            jTextArea3.setText("");
            s.close();
            jTextArea2.setEditable(false);
            jTextField2.setEditable(true);
            jTextField3.setEditable(true);
            
            
        } catch (IOException ex) {
            Logger.getLogger(clientPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        jTextField1.setEditable(true); 
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed
 if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
     if (connect){ JOptionPane.showMessageDialog(null, " Client Already Connected  ", "Error", JOptionPane.ERROR_MESSAGE);}
     
       // le client va essayer de se connecter au serveur specifié par l'addresse et le port
           
            
         addr = jTextField1.getText().toString();
         if (addr.isEmpty()) {
                 JOptionPane.showMessageDialog(null, " Veuillez saisir une addresse ", "Addresse non saisie", JOptionPane.ERROR_MESSAGE);
             return;
            }
          pattern = Pattern.compile(IPADDRESS_PATTERN);
           matcher = pattern.matcher(addr);
          if ( matcher.matches() == false) 
          {
                JOptionPane.showMessageDialog(null, " Veuillez saisir une addresse IP valide ", "Addresse non Valide", JOptionPane.ERROR_MESSAGE);
             return;
          }	
         
         String proxy = jTextField2.getText().toString();
         
         if (proxy.isEmpty()) {
                 JOptionPane.showMessageDialog(null, " Veuillez saisir un port ", "Port non saisie", JOptionPane.ERROR_MESSAGE);
             return;
            }
         
        
            pseudo = jTextField3.getText().toString();
            if (pseudo.isEmpty()) {
                 JOptionPane.showMessageDialog(null, " Veuillez renseigner le pseudo  ", "Pseudo non saisie", JOptionPane.ERROR_MESSAGE);
             return;
            }
             
            
         
         
            try{
                  proxyInt = Integer.parseInt(proxy);
                   if (proxyInt <1024  ) {
                        JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre entre ]1023; 65535] , Veuillez saisir a nouveau le port ", "Erreur de PortRange", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (proxyInt >65535  ) {
                        JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre entre ]1023; 65535] , Veuillez saisir a nouveau le port ", "Erreur de PortRange", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre entre ]1023; 65535] , Veuillez saisir a nouveau le port ", "Erreur de Port", JOptionPane.ERROR_MESSAGE);
               jTextField2.setText("");
                return;
             }
      
        
         try{
       
            s = new Socket (addr,proxyInt); //connexion au serveur
            jButton2.setEnabled(false);
            jButton3.setEnabled(true);
             jTextField3.setEditable(false);
             jTextField1.setEditable(false); 
              connect=true;
              jButton3.setBackground(new java.awt.Color(242, 192, 32));
              jButton2.setBackground(new java.awt.Color(238, 238, 238));
              
            
        
            
            // String contact= pseudo+":"+adrClient;
           

            String msg_area= "Bienvenue "+pseudo+", Vous etes connecté sur la porte : "+proxyInt +"  du serveur : "+ addr +"\n\n";
             jPanel5.setBackground(Color.decode("#7AAEAD"));
             try {InputStream sound= new FileInputStream(new File("../JavaApplication3/src/javaapplication3/sounds/client_connected.wav"));AudioStream audio=new AudioStream(sound); AudioPlayer.player.start(audio);} catch (Exception e) {}
            playSound("../src/javaapplication3/sounds/client_connected.wav");
             
            jTextArea1.setText(msg_area);
            jTextArea2.setEditable(true);
             jTextField2.setEditable(false);

            BufferedReader br = new BufferedReader( new InputStreamReader ( s.getInputStream()));
             is = s.getInputStream();
                                // ois = new ObjectInputStream( is);

            pw = new PrintWriter (s.getOutputStream(),true);

            // retourne l'adresse IP du socket cad le serveur
          
            String IP_Server = s.getRemoteSocketAddress().toString();


            
      
         new Conversation(s,pseudo).start();

           
        } catch (IOException ex) {
            Logger.getLogger(clientPanel.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this, "Le ServerSocket spécifié n'est pas ouvert , Veuillez vous connecter sur un Serveur Socket Ouvert  ", "Socket Closed", JOptionPane.ERROR_MESSAGE);
             return;}}
    }//GEN-LAST:event_jTextField3KeyPressed

    private void jTextArea2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea2KeyPressed
  
 if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
     if (!(jTextArea2.getText().equals(""))) {
    // si le client veut envoyer un mesage au Serveur

        String msg= "<"+pseudo+":"+adrClient+">" +" ::\t"+ jTextArea2.getText().toString()+"\n"; // dans le TextArea du client le msg sera du format <IP:port> : blblblblbl
       //String msgCrypte = encryptDecrypt(msg);
        pw.println(msg); // envoie le message au serveur
   
        jTextArea2.setText("");
         jTextArea2.setColumns(-1);

     
       
 
 
 
 
 
 
 }      
 else jTextArea2.setText("");

 } // TODO add your handling code here:
    }//GEN-LAST:event_jTextArea2KeyPressed

    private void bouton__ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bouton__ActionPerformed
        this.setState(this.ICONIFIED);        // TODO add your handling code here:
    }//GEN-LAST:event_bouton__ActionPerformed

    private void boutonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonExitActionPerformed
  if (connect) {connect=false;
        try {
            // TODO add your handling code here:
            
            jButton2.setEnabled(true);
            jButton3.setEnabled(false);
            jTextArea1.append("---------------Vous etes deconnecté du Server Socket ------------------------\n");
            try {InputStream sound= new FileInputStream(new File("../JavaApplication3/src/javaapplication3/sounds/client_out.wav"));AudioStream audio=new AudioStream(sound); AudioPlayer.player.start(audio);} catch (Exception e) {}
            playSound("../src/javaapplication3/sounds/client_out.wav");
            
            jPanel5.setBackground(Color.decode("#CCCCCC"));
             jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
            JOptionPane.showMessageDialog(this, "Vous etes deconnecté du server ", "Deconnexion", JOptionPane.INFORMATION_MESSAGE);
            pw.println("##logout Le client "+pseudo +" , IP= " +adrClient+" s'est deconnecté du server");
            pw.println(pseudo+":"+adrClient);
            jTextArea3.setText("");
            s.close();
            jTextArea2.setEditable(false);
            jTextField2.setEditable(true);
            jTextField3.setEditable(true);
            
            
        } catch (IOException ex) {
            Logger.getLogger(clientPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
  }
                this.setVisible(false);   System.exit(0);
    }//GEN-LAST:event_boutonExitActionPerformed

    private void jPanel5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MousePressed
  xx=evt.getX();
       xy=evt.getY();           // TODO add your handling code here:
    }//GEN-LAST:event_jPanel5MousePressed

    private void jPanel5MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseDragged
 int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xx, y - xy);           // TODO add your handling code here:
    }//GEN-LAST:event_jPanel5MouseDragged

    private void jTextField4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4KeyPressed

    @Override
        public void run() {
        
         }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(clientPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(clientPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(clientPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(clientPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new clientPanel().setVisible(true);
            }
        });
    }
    

     class Conversation extends Thread {
		
    
		private Socket socket;
		private String pseudo;
               // private String adrClient;
		
		public Conversation(Socket s, String pseudo) {
			this.socket = s;
                        this.pseudo = pseudo;
                        //this.adrClient= adrClient;
			
		}
		//############################################################################################
		@Override
		public void run() {
			
			try {
				// pour pouvoir lire une chaine de caracteres
				
				BufferedReader br = new BufferedReader( new InputStreamReader (socket.getInputStream()));
				
				OutputStream os = socket.getOutputStream();
				PrintWriter pw= new PrintWriter(os,true); // le "true" signifie que le msg sera envoyé ligne par ligne
				
				// recuperer l'adresse IP du client
				
                                String access= br.readLine();
                                
                                if ( access.equals("#ErrorCode")) {
                                    
                                            jTextArea3.setText(" ");
                                            jTextArea1.setText("Le code d'access saisi est erroné , veuillez réessayer ..." );
                                                jButton2.setEnabled(true);
                                                jButton3.setEnabled(true);
                                    
                                }
                                
                                else {
                                    
                                
                                    
                // String adrClient; 
                                 adrClient = access; 
                                  pw.println("##LOGIN##");
                                  contact= pseudo+":"+adrClient;
                                 //envoie PSeudo+id au serveur
                                 pw.println(contact);

                                 String aAfficher = jTextField3.getText().toString()+"--"+adrClient;

                                 //affichage dans la Contact List
                                 jTextArea3.append(aAfficher);
                                 jTextArea3.append("\n \n");
                               
                  
				//la conversation doit etre dans une boucle
				String req;
                                 pattern = Pattern.compile(CONTACTLIST_PATTERN); // ici on compile le Pattern préalablement defini, donc la variable 
   	  											      // pattern devient le modele a respecter dorenavant
                                
                                  while((req = br.readLine()) != null) {  //j'attends que le server  menvoie une chaine de caracteres
                                          jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                                       String  msg= req+"\n";
                                       
                                        if (msg.startsWith("## ")){
                                            
                                           //  msg.replaceFirst("","## ");
                                             
                                            jTextArea3.setText(" Online : \n------------------------\n");
                                            
                                            while((req = br.readLine()) != null) {
                                    
                                             String[] testlist=req.split(":/");
                                             if (testlist.length==2){
                                               jTextArea3.append(req.replace("##", " ")+"\n");
                                                
                                             }
                                              
                                               if (req.endsWith("##")){break;}
                                          }
                                        }
                                        
                                        //String msgDecryptee= encryptDecrypt(req); 
                                        
                                        //System.out.println(msgDecryptee);
                                           
                                        
                                            
                                        jTextArea1.append(msg); // afichage du message du serveur dans la textArea du client 
                                        //try {InputStream sound= new FileInputStream(new File("../JavaApplication3/src/javaapplication3/sounds/wizz.wav"));AudioStream audio=new AudioStream(sound); AudioPlayer.player.start(audio);} catch (Exception e) {}
                                        //playSound("../src/javaapplication3/sounds/wizz.wav");
                                        jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                                  }   
                        }  
                                     
                                  
                                  
                                  
                                  
                                 
		
		} catch (IOException e) {
			
			e.printStackTrace();
		}  
	}
     }
     
     
     
     public void playSound(String url) {
          Thread thread = new Thread(){
    public void run(){
       AudioFilePlayer play = new AudioFilePlayer();
         play.play(url);
    }
  };

            thread.start();
}

   
     
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boutonExit;
    private javax.swing.JButton bouton__;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
