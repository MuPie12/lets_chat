/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication3;


import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static javaapplication3.clientPanel.accessCode;
import static javaapplication3.clientPanel.addr;
import static javaapplication3.clientPanel.codeAccess;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;

import javax.swing.JOptionPane;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;
import java.io.File;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;

/**
 *
 * @author wrx
 */
public class serverPanel extends javax.swing.JFrame implements Runnable  {

    /**
     * Creates new form serverPanel
     * 
     * 
     * 
     */
    
    
    
    static ServerSocket ss;
    static Socket s;
    static InputStream  is;
    static InputStreamReader isr;
    static OutputStream os;
    static ObjectOutputStream oos;
    static ObjectInputStream ois;
    
    static PrintWriter pw;
    static boolean sactif=false;
    static BufferedReader br;
    static List <Socket> socketList = new ArrayList();
    static List<String> contactList =  new ArrayList();
    static int portInt;
    static int numclient = 0;
    static String pseudoIp;
    static String ContactsString="";
    static String addr;
    static String accessCode;
    static int codeAccess;
    
    
    Thread t1;
     private static final String IPADDRESS_PATTERN = 
		"^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
     static private Pattern pattern;
   static  private Matcher matcher;
    
    int xx,xy;
    

    
    public serverPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        bouton__ = new javax.swing.JButton();
        boutonExit = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server Multi Client Panel");
        setUndecorated(true);
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(122, 174, 173));
        jPanel5.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel5MouseDragged(evt);
            }
        });
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel5MousePressed(evt);
            }
        });
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(254, 254, 254));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel5.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 540, -1, -1));

        jPanel3.setBackground(new java.awt.Color(254, 254, 254));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel5.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 0, -1, -1));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Address : ");
        jPanel5.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 295, 113, 30));

        jTextField1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        jTextField1.setText("127.0.0.1");
        jTextField1.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        jTextField1.setSelectionColor(new java.awt.Color(254, 207, 33));
        jPanel5.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(149, 290, 210, 40));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Access Code :");
        jPanel5.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, 140, 30));

        jTextField2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(0, 0, 0));
        jTextField2.setSelectedTextColor(new java.awt.Color(4, 2, 2));
        jTextField2.setSelectionColor(new java.awt.Color(226, 191, 0));
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
        });
        jPanel5.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 390, 190, 40));

        jButton2.setBackground(new java.awt.Color(36, 46, 68));
        jButton2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Launch !");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 610, 150, 120));

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel5.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 625, -1, -1));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 30)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Server Multi Client Panel ");
        jPanel5.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 380, 90));

        jButton3.setBackground(new java.awt.Color(36, 46, 68));
        jButton3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Stop");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 610, 160, 120));

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea2KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea2);

        jPanel5.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 600, 670, 140));

        jButton1.setBackground(new java.awt.Color(122, 174, 173));
        jButton1.setFont(new java.awt.Font("Open Sans", 0, 36)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication3/enter-key-512(1).png"))); // NOI18N
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 600, 150, 140));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel5.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 70, 823, 500));

        bouton__.setBackground(new java.awt.Color(36, 46, 68));
        bouton__.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        bouton__.setForeground(new java.awt.Color(255, 255, 255));
        bouton__.setText("-");
        bouton__.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bouton__ActionPerformed(evt);
            }
        });
        jPanel5.add(bouton__, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 10, 40, 40));

        boutonExit.setBackground(new java.awt.Color(36, 46, 68));
        boutonExit.setFont(new java.awt.Font("Century Gothic", 1, 10)); // NOI18N
        boutonExit.setForeground(new java.awt.Color(255, 255, 255));
        boutonExit.setText("X");
        boutonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonExitActionPerformed(evt);
            }
        });
        jPanel5.add(boutonExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1239, 10, -1, 40));

        jTextField3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(0, 0, 0));
        jTextField3.setSelectedTextColor(new java.awt.Color(4, 2, 2));
        jTextField3.setSelectionColor(new java.awt.Color(226, 191, 0));
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
        });
        jPanel5.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 470, 190, 40));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Port : ");
        jPanel5.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 395, 60, 30));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Port : ");
        jPanel5.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 395, 60, 30));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 820));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

 if (!(jTextArea2.getText().equals(""))) {
        try {
            // Bouton envoyer Message vers le Client
            os = s.getOutputStream();
            String msg_out="";
            msg_out="<Server> ::: " +jTextArea2.getText().trim()+"\n"; // recolte du message de la zone TextArea

            pw = new PrintWriter (os,true);// true : msg envoyé ligne par ligne
            //le serveur envoie le message au client :
           // pw.println(msg_out);
            BroadcastMessage(msg_out,s);

            //le message est affiché dans la TextArea du Serveur

            
            jTextArea1.append(msg_out+"\n");
             jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
            jTextArea2.setText("");

        } catch (IOException ex) {
            Logger.getLogger(serverPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        //le bouton Launch du serveur
        //il doit lancer un serveur Socket avec le port saisie par l'user

         addr = jTextField1.getText().toString();
        if ( addr.isEmpty()) {
                 JOptionPane.showMessageDialog(this, " Veuillez saisir une  addresse IP ", "Adresse Non saisie ", JOptionPane.ERROR_MESSAGE);
                 return;
        }
         pattern = Pattern.compile(IPADDRESS_PATTERN);
           matcher = pattern.matcher(addr);
          if ( matcher.matches() == false) 
          {
                JOptionPane.showMessageDialog(null, " Veuillez saisir une addresse IP valide ", "Addresse non Valide", JOptionPane.ERROR_MESSAGE);
             return;
          }	
        
        String portStr = jTextField2.getText().toString();
        if ( portStr.isEmpty()) {
                 JOptionPane.showMessageDialog(this, " Veuillez saisir un  port ", "Port Non saisie ", JOptionPane.ERROR_MESSAGE);
                 
                 return;
        }
        
        try{ 
            
            portInt= Integer.parseInt(portStr);
            if (portInt <1024  ) {
                JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre entre ]1023; 65535] , Veuillez saisir a nouveau le port ", "Erreur de PortRange", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (portInt >65535  ) {
                JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre entre ]1023; 65535] , Veuillez saisir a nouveau le port ", "Erreur de PortRange", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre entre ]1023; 65535] , Veuillez saisir a nouveau le port ", "Erreur de Port", JOptionPane.ERROR_MESSAGE);
            jTextField2.setText("");
            return;
        }
        
        
              accessCode = jTextField3.getText().toString();
              if ( addr.isEmpty()) {
                
                 JOptionPane.showMessageDialog(null, " Veuillez saisir l'access Code ", "Access Code  non saisie", JOptionPane.ERROR_MESSAGE);
             return;
                
            }
            try{
               codeAccess= Integer.parseInt(accessCode);
            }
              catch( NumberFormatException e){
                  
                   JOptionPane.showMessageDialog(null, " l'acces code doit etre un entier ", "Access Code  Eronée", JOptionPane.ERROR_MESSAGE);
             return;
              }
      
        
        
        jButton3.setEnabled(true); // le bouton Stop est clickable cad on peut arreter le serveur
        jButton2.setEnabled(false); // le contraire le bouton launch nest pas clickable
        jTextField2.setEditable(false);
        jTextField1.setEditable(false);
         jTextArea2.setEnabled(true);
        jTextArea2.setEditable(true);
        
               
               
                 t1 = new Thread (this);
                 t1.start();
                  
                
      
            
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jButton3.setEnabled(false); // le bouton false se met a False cad nest plus clickable
        jButton2.setEnabled(true); // launch est a new clickable
        jTextArea2.setEnabled(false);
        jTextField2.setEditable(true);
        jTextField1.setEditable(true);
        try {
            //lorsque le bouton STOP est cliqué, le socket et le serverSocket se Ferme et le bouton Stop devient Unclickable
            //System.out.println("bbbbbbbbbbbbbbbbbbbbbbbbbbb");

            String msg= "!!!!!!!!!!!!!!!- Le Serveur est Fermé -!!!!!!!!!!!!!!!\n";
            String msg2= msg + "\n Veuillez relancer le Serveur et reconnectez Vous \n ";
            BroadcastMessage(msg2,s); //envoie le message de warning au Client
               
            for (Socket so: socketList){
                 so.close(); //fermeture du socket
            }
            contactList.clear();
          
            ss.close(); //fermeture du ServeurSocket


            jTextArea1.append(msg);
          
              try {InputStream sound= new FileInputStream(new File("../src/javaapplication3/sounds/server_off.wav"));AudioStream audio=new AudioStream(sound); AudioPlayer.player.start(audio);} catch (Exception e) {}
                         playSound("../src/javaapplication3/sounds/server_off.wav");
                              
           
           
           
           jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
            jTextField2.setEditable(true);

            //System.out.println("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee");

        } catch (IOException ex) {
            Logger.getLogger(serverPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
         if (evt.getKeyCode()==KeyEvent.VK_ENTER) {

           
             //le bouton Launch du serveur
        //il doit lancer un serveur Socket avec le port saisie par l'user
         addr = jTextField1.getText().toString();
        if ( addr.isEmpty()) {
                 JOptionPane.showMessageDialog(this, " Veuillez saisir une  addresse IP ", "Adresse Non saisie ", JOptionPane.ERROR_MESSAGE);
                 return;
        }
         pattern = Pattern.compile(IPADDRESS_PATTERN);
           matcher = pattern.matcher(addr);
          if ( matcher.matches() == false) 
          {
                JOptionPane.showMessageDialog(null, " Veuillez saisir une addresse IP valide ", "Addresse non Valide", JOptionPane.ERROR_MESSAGE);
             return;
          }	
        
        
        String portStr = jTextField2.getText().toString();
        if ( portStr.isEmpty()) {
                 JOptionPane.showMessageDialog(this, " Veuillez saisir un  port ", "Port Non saisie ", JOptionPane.ERROR_MESSAGE);
                 return;
        }
        
        try{ 
            
            portInt= Integer.parseInt(portStr);
            if (portInt <1024  ) {
                JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre entre ]1023; 65535] , Veuillez saisir a nouveau le port ", "Erreur de PortRange", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (portInt >65535  ) {
                JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre entre ]1023; 65535] , Veuillez saisir a nouveau le port ", "Erreur de PortRange", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
        }catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre  entre ]1023; 65535] , Veuillez saisir a nouveau le port ", "Erreur de Port", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        jButton3.setEnabled(true); // le bouton Stop est clickable cad on peut arreter le serveur
        jButton2.setEnabled(false); // le contraire le bouton launch nest pas clickable
        jTextField2.setEditable(false);
        jTextArea2.setEditable(true);
        
               
               
                 t1 = new Thread (this);
                 t1.start();
                  
                
             
             
             
             
             
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2KeyPressed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
         // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextArea2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea2KeyPressed
   if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
  if (!(jTextArea2.getText().equals(""))) {
 
   try {
            // Bouton envoyer Message vers le Client
            os = s.getOutputStream();
            String msg_out="";
            msg_out="<Server> ::: " +jTextArea2.getText().trim()+"\n"; // recolte du message de la zone TextArea

            pw = new PrintWriter (os,true);// true : msg envoyé ligne par ligne
            //le serveur envoie le message au client :
           // pw.println(msg_out);
            BroadcastMessage(msg_out,s);

            //le message est affiché dans la TextArea du Serveur

            
            jTextArea1.append(msg_out+"\n");
             jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
            jTextArea2.setText("");

        } catch (IOException ex) {
            Logger.getLogger(serverPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
 
 }       
  else jTextArea2.setText("");



   }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextArea2KeyPressed

    private void bouton__ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bouton__ActionPerformed
        this.setState(this.ICONIFIED);        // TODO add your handling code here:
    }//GEN-LAST:event_bouton__ActionPerformed

    private void boutonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonExitActionPerformed
         this.setVisible(false);   System.exit(0);
    }//GEN-LAST:event_boutonExitActionPerformed

    private void jPanel5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MousePressed
       xx=evt.getX();
       xy=evt.getY();        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel5MousePressed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
      xx=evt.getX();
       xy=evt.getY();         // TODO add your handling code here:
    }//GEN-LAST:event_formMousePressed

    private void jPanel5MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseDragged
    int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xx, y - xy);          // TODO add your handling code here:
    }//GEN-LAST:event_jPanel5MouseDragged

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3KeyPressed

      @Override
            public void run() {
     
                
                      try {
                          
                        ss = new ServerSocket(portInt); // on lance un Serveur Socket
         //try {InputStream sound= new FileInputStream(new File("C:\\Users\\Bang\\Desktop\\TP AppDest\\JavaApplication3-final\\JavaApplication3\\src\\javaapplication3\\sounds\\server_on.wav"));AudioStream audio=new AudioStream(sound); AudioPlayer.player.start(audio);} catch (Exception e) {}
     
         try {InputStream sound= new FileInputStream(new File("../JavaApplication3/src/javaapplication3/sounds/server_on.wav"));AudioStream audio=new AudioStream(sound); AudioPlayer.player.start(audio);} catch (Exception e) {}
          //playSound("../JavaApplication3/src/javaapplication3/sounds/server_off.mp3");
        playSound("../src/javaapplication3/sounds/server_on.wav");
          
          
         
         String syso=System.getProperty("user.dir");
//syso.replaceAll("\\", "\\\\");
                   System.out.println(syso);

                        //System.out.println("1111111111111111111111111111");
                        // en attente de Connexion , il doit l'afficher dans le TextArea
                        for (int k=0;k<2;k++){
                            int yield=500;
                            jTextArea1.setText("Starting Server .");
                                
                                
                                
                          try {
                              Thread.sleep(yield);
                          } catch (InterruptedException ex) {
                              Logger.getLogger(serverPanel.class.getName()).log(Level.SEVERE, null, ex);
                          }
                                 jTextArea1.append(" .");
                                 
                                     try {
                              Thread.sleep(yield);
                          } catch (InterruptedException ex) {
                              Logger.getLogger(serverPanel.class.getName()).log(Level.SEVERE, null, ex);
                          }  
                                    jTextArea1.append(" .");         
                          try {
                              Thread.sleep(yield);
                          } catch (InterruptedException ex) {
                              Logger.getLogger(serverPanel.class.getName()).log(Level.SEVERE, null, ex);
                          }
                                 jTextArea1.append(" .");
                                 
                                     try {
                              Thread.sleep(yield);
                          } catch (InterruptedException ex) {
                              Logger.getLogger(serverPanel.class.getName()).log(Level.SEVERE, null, ex);
                          }  
                                     
                        }     
                                 
                                 
                        String msg= "LE SERVEUR EST LANCE SUR LE PORT: "+portInt +"\n";
                        jTextArea1.setText("");
                        for (char i : msg.toCharArray() ){
                            String cc =Character.toString(i);
                         jTextArea1.append(cc);
                            try {
                              Thread.sleep(10);
                          } catch (InterruptedException ex) {
                              Logger.getLogger(serverPanel.class.getName()).log(Level.SEVERE, null, ex);
                          }  
                        }
          
                        jTextArea1.append("<Server> : En attente de Connexion d'un client  \n--------------------------------------------------------------\n ");
                         jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
   


                        while (true) {
                                    s = ss.accept(); //en attente de users






                                    br = new BufferedReader( new InputStreamReader (s.getInputStream()));

                                    os = s.getOutputStream();

                                    pw= new PrintWriter(os,true); // le "true" signifie que le msg sera envoyé ligne par ligne

                                    String IP_Client = s.getRemoteSocketAddress().toString();
                                    
                                   String accessCode=  br.readLine();
                                   
                                   
                                   if ( ! (accessCode.equals(jTextField3.getText().toString() ))) {
                                       
                                        pw.println("#ErrorCode");
                                        s.close();
                                        
                                       
                                   }
                                   else {
                                   
                                   
                                    socketList.add(s);  // on ajoute dans la liste de Sockets conencté au server afin de diffuser les messages envoyés par les users 


                                    NotifierUsers(s);  //une fois un user connecté , le notifier
                                   
                                  
                       
                                    new Conversation(s,IP_Client).start();
                               
                                 
                        }
                        }
            
            
            
            

        } catch (IOException ex) {
            Logger.getLogger(serverPanel.class.getName()).log(Level.SEVERE, null, ex);
        }/*catch(IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Le port rentré doit etre un nombre>1023 et< 65565 , Veuillez saisir a nouveau le port ", " Port Out of Range", JOptionPane.ERROR_MESSAGE);
            return;
        }*/
    
      
    
            }
            
                
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(serverPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(serverPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(serverPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(serverPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               
               
                new serverPanel().setVisible(true);
            }
        });
    }

 
    
    
    
   class Conversation extends Thread {
		
		private Socket socket;
		private String IP_Client;
                InputStream sound;
		
		public Conversation(Socket s,String ip) {
                    this.socket = s;
                    this.IP_Client=ip;
		}
		//############################################################################################
		@Override
		public void run() {
			
			try {
				// pour pouvoir lire une chaine de caracteres
                                numclient++;
				
				BufferedReader br = new BufferedReader( new InputStreamReader (socket.getInputStream()));
				
				OutputStream os = socket.getOutputStream();
				PrintWriter pw= new PrintWriter(os,true); // le "true" signifie que le msg sera envoyé ligne par ligne
				
				// retourne l'adresse IP du client 
				String ipClient = socket.getRemoteSocketAddress().toString(); 
					
				System.out.println("Connexion du client IP="+ ipClient+"\n");
				
                                //le serveur envoie ce message au client 
				
                                pw.println(ipClient);
                                String loginn=br.readLine();
                                if (!loginn.equals("##LOGIN##")) {
                                s.close();
                                
                            }else{
                                    
                                     String msgi = "<Server> :: Le client "+ IP_Client +" s'est connecté avec succès \n " ;
                             try {InputStream sound= new FileInputStream(new File("../JavaApplication3/src/javaapplication3/sounds/client_in.wav"));AudioStream audio=new AudioStream(sound); AudioPlayer.player.start(audio);} catch (Exception e) {}
                               playSound("../src/javaapplication3/sounds/client_in.wav");
                                    jTextArea1.append(msgi);
                                     jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                                    
                                    
                                pw.println("<Server> :: Bienvenue, Vous etes le client numero "+numclient+" , IP= "+ipClient);
				
                        
				
				
                               String req;
                  
                               pseudoIp=  br.readLine(); // recupere le pseudo-IP du client pour la iste de contact
                               contactList.add(pseudoIp); // Ajout de la Liste de Contact
                                // System.out.println("this is array : ");
                               //System.out.println(contactList);
                             
                               
                               //String foramtedcontact="## \n"+contactList+"##";
                              // foramtedcontact.replaceAll(",", "\n");
                              
                             String foramtedcontact=String.join("\n", contactList);
                             String listreq="## \n"+foramtedcontact+"##";
                             BroadcastMessage(listreq, socket);
                             
                          //   pw.println("## \n"+foramtedcontact+"##");
                           
                              
                               
                                       //la conversation doit etre dans une boucle
                    //le serveur affiche dans le textarea , tout ce qu le client envoies
				  
                    while((req = br.readLine()) != null) {  //j'attends que le client  menvoie une chaine de caracteres
                    
                                    String  msg= req+"\n";
                                  if (msg.startsWith("##logout")){
                                      String logout=br.readLine();
                                      contactList.remove(logout);    
                               try {InputStream sound= new FileInputStream(new File("../JavaApplication3/src/javaapplication3/sounds/client_out.wav"));AudioStream audio=new AudioStream(sound); AudioPlayer.player.start(audio);} catch (Exception e) {}
                               playSound("../src/javaapplication3/sounds/client_out.wav");
                              
                                    foramtedcontact=String.join("\n", contactList);
                                     listreq="## \n"+foramtedcontact+"##";
                                     BroadcastMessage(listreq, socket);
                                      BroadcastMessage(logout+" is Logged out ! \n", socket);
                                      jTextArea1.append("\n"+logout+" is Logged out !\n ");
                                         jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                                  break;
                                  }
                                  
                                    BroadcastMessage(req,s);
                                   // System.out.println("pppppppppppppppppppppppppppppppppppppppppppppppppppppp");
                                   //String msgDecryptee = encryptDecrypt(req);  
                                   
                                   jTextArea1.append(msg ); // afichage du message du client dans la textArea du Serveur
                                       jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                                       
                             //try {InputStream sound= new FileInputStream(new File("../JavaApplication3/src/javaapplication3/sounds/wizz.wav"));AudioStream audio=new AudioStream(sound); AudioPlayer.player.start(audio);} catch (Exception e) {}
                            //playSound("../src/javaapplication3/sounds/wizz.wav");

                                       
                                     
                                  }

                                }
		
		} catch (IOException e) {
			
			e.printStackTrace();
		}
                
	}
    }
    
     public void  BroadcastMessage(String req, Socket source)
            { // à revoir 
    
                    for (Socket so: socketList) {
                                try {
                                      //  if ( source != so ) {
                                          PrintWriter pw =new PrintWriter(so.getOutputStream(),true);
                                        //
                                
                                 String  msg=req;
                                         pw.println (msg);
                                           //  jTextArea1.append(msg); // afichage du message du client dans la textArea du Serveur
                                        //}
                                    }
                                catch( Exception e) { 
                                        e.printStackTrace();
                                    }
                    }
            }
     
     public void NotifierUsers(Socket source) {
         
         for (Socket so :socketList ) {
             
             try {
                 PrintWriter pw = new PrintWriter(so.getOutputStream(),true);
                 
                 
                 //envoie de msg aux autres user de la liste
                 if ( so != source) {
                     String msg= "Un nouveau Client s'est connecté au server,IP=  "+source.getRemoteSocketAddress();
                     //System.out.println("notification :   "+pseudoIp);
                   /*  oos = new ObjectOutputStream (os);
                     oos.writeObject(contactList);*/
                     pw.println(msg);
                 }
             } catch (IOException ex) {
                 Logger.getLogger(serverPanel.class.getName()).log(Level.SEVERE, null, ex);
             }
             
         }
     }
     
     
     
     public void playSound(String url) {
          Thread thread = new Thread(){
                public void run(){
                   AudioFilePlayer play = new AudioFilePlayer();
                     play.play(url);
                }
        };

         thread.start();
}

   
     




    
  



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boutonExit;
    private javax.swing.JButton bouton__;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}

